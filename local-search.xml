<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>利用ssh实现VSCODE远程连接虚拟机进行开发</title>
    <link href="/2024/06/11/%E5%88%A9%E7%94%A8ssh%E5%AE%9E%E7%8E%B0VSCODE%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/"/>
    <url>/2024/06/11/%E5%88%A9%E7%94%A8ssh%E5%AE%9E%E7%8E%B0VSCODE%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p>本文介绍如何使用ssh实现远程开发。</p><h1 id="虚拟机安装ssh-server"><a href="#虚拟机安装ssh-server" class="headerlink" title="虚拟机安装ssh server"></a>虚拟机安装ssh server</h1><p>VSCode 并非用于直接连接虚拟机的工具，而是一款专注于代码（文本）编辑的应用程序。我们实际上是通过一种特殊的方式来实现虚拟机连接，而这种方式允许我们在 VSCode 中享受代码编写的环境。这个特殊的方式就是 ssh。因此首先需要在虚拟机中安装ssh server</p><p>ssh 服务器（ssh Server）：</p><ul><li>ssh 服务器是运行在远程计算机上的软件或服务，它监听着 ssh 协议的连接请求，并允许远程用户通过 SSH 协议进行安全访问。</li><li>主要任务包括验证用户身份、管理连接请求、启动远程会话、执行命令和文件传输。</li></ul><p>在虚拟机中执行以下命令进行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 ssh server</span> <br>sudo apt install openssh-server <br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动 ssh server</span> <br>sudo systemctl start ssh <br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置系统开机自启动</span> <br>sudo systemctl enable ssh`<br></code></pre></td></tr></table></figure><p>检验是否启动成功，输入下述命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">出现 /usr/sbin/sshd 类似信息则已启动成功</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">ps aux | grep sshd</span> <br>root   765  0.0  0.0  15420  8784 ?        Ss   03:50   0:00 sshd: /usr/sbin`<br></code></pre></td></tr></table></figure><h1 id="虚拟机网络设置"><a href="#虚拟机网络设置" class="headerlink" title="虚拟机网络设置"></a>虚拟机网络设置</h1><p>虚拟机ssh server安装完毕后，我们需要配置虚拟机的网络设置，以确保我们可以从主机访问虚拟机。</p><h2 id="固定ip配置"><a href="#固定ip配置" class="headerlink" title="固定ip配置"></a>固定ip配置</h2><p>首先打开虚拟机界面，进入虚拟机，打开控制台，输入如下指令，获取当前虚拟机的局域网ip地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ifconfig<br></code></pre></td></tr></table></figure><p>虚拟机ip地址如图所示，为192.168.94.128<br><img src="https://raw.githubusercontent.com/onep1us/blog_pics/main/%E8%99%9A%E6%8B%9F%E6%9C%BAip%E5%9C%B0%E5%9D%80.jpg" alt="虚拟机ip地址"><br>因为我们在ssh连接虚拟机时，希望虚拟机的ip地址为固定的，但是目前虚拟机是通过DHCP获取动态的地址，这就导致了每次虚拟机重启后，虚拟机的ip地址会发生变化，造成此前配置好的ssh连接失效。因此，我们需要将虚拟机的IP地址设置为静态的。流程如下所示<br>首先需要进入网卡配置的目录，输入如下指令进入该目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/netplan<br></code></pre></td></tr></table></figure><p>进入目录后，查看当前目录的配置文件，修改配置文件，本人所使用的系统的配置文件名称为01-network-manager-all.yaml，输入如下指令修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vi 01-network-manager-all.yaml<br></code></pre></td></tr></table></figure><p>修改配置文件为如下内容，其中ens33为本系统的网卡，通过ifconfig指令可以查看本系统的网卡名称。addresses为本系统的静态ip。routes是网关配置，nameservers是dns服务器地址。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">network:</span><br>   <span class="hljs-attr">version:</span> <span class="hljs-number">2</span><br>   <span class="hljs-attr">ethernets:</span><br>     <span class="hljs-attr">ens33:</span><br>       <span class="hljs-attr">dhcp4:</span> <span class="hljs-literal">no</span><br>       <span class="hljs-attr">addresses:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.94</span><span class="hljs-number">.128</span><span class="hljs-string">/24</span>                                                                                                                                               <br>       <span class="hljs-attr">routes:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">to:</span> <span class="hljs-string">default</span><br>            <span class="hljs-attr">via:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.94</span><span class="hljs-number">.2</span><br>       <span class="hljs-attr">nameservers:</span><br>         <span class="hljs-attr">addresses:</span><br>           <span class="hljs-bullet">-</span> <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span><br>           <span class="hljs-bullet">-</span> <span class="hljs-number">8.8</span><span class="hljs-number">.4</span><span class="hljs-number">.4</span><br></code></pre></td></tr></table></figure><p>配置完成后，输入如下指令使改动生效，重启系统后，在控制台调用ifconfig指令发现ip地址没有发生变化，即配置完成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netplan apply<br></code></pre></td></tr></table></figure><h2 id="网络映射"><a href="#网络映射" class="headerlink" title="网络映射"></a>网络映射</h2><p>静态ip配置完毕后，进行网络映射的配置，打开虚拟机页面，本人采用的vmware虚拟机，虚拟机界面如图所示，选择<strong>虚拟网络编辑器</strong>。<br><img src="https://raw.githubusercontent.com/onep1us/blog_pics/main/%E7%BD%91%E7%BB%9C%E6%98%A0%E5%B0%84%E6%AD%A5%E9%AA%A41.jpg" alt="步骤1"><br>点击<strong>更改设置</strong>按钮。<br><img src="https://raw.githubusercontent.com/onep1us/blog_pics/main/%E7%BD%91%E7%BB%9C%E6%98%A0%E5%B0%84%E6%AD%A5%E9%AA%A42.jpg" alt="网络映射步骤2"><br>选择VMnet8，再选择NAT模式，点击NAT设置<br><img src="https://raw.githubusercontent.com/onep1us/blog_pics/main/%E7%BD%91%E7%BB%9C%E6%98%A0%E5%B0%84%E6%AD%A5%E9%AA%A43.jpg" alt="网络映射步骤2"><br>点击添加按钮<br><img src="https://raw.githubusercontent.com/onep1us/blog_pics/main/%E7%BD%91%E7%BB%9C%E6%98%A0%E5%B0%84%E6%AD%A5%E9%AA%A44%E4%BF%AE%E6%94%B9%E7%89%88.jpg" alt="网络映射步骤4"><br>填写主机端口为22，虚拟机ip地址为此前通过ifconfig获取到的地址，虚拟机端口为22，点击确定，至此，虚拟机网络配置结束。<br><img src="https://raw.githubusercontent.com/onep1us/blog_pics/main/%E7%BD%91%E7%BB%9C%E6%98%A0%E5%B0%84%E6%AD%A5%E9%AA%A45.jpg" alt="网络映射步骤5"></p><h1 id="windows环境下安装ssh"><a href="#windows环境下安装ssh" class="headerlink" title="windows环境下安装ssh"></a>windows环境下安装ssh</h1><p>打开系统设置页面，点击系统，再点击可选功能，如果可选功能中没有openSSH客户端的话，需要点击查看功能，选择openSSH客户端，添加客户端。</p><p><img src="https://raw.githubusercontent.com/onep1us/blog_pics/main/windows%E9%85%8D%E7%BD%AEssh.jpg" alt="windows安装ssh"><br>在windows上安装ssh完毕后，打开powershell执行如下指令进行ssh连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">-p 表示端口 后面数字为端口号</span><br>ssh -p 22 oneplus@192.168.94.128<br></code></pre></td></tr></table></figure><p>输入虚拟机用户对应的密码即可连接到虚拟机当中。</p><h1 id="使用-VSCode-连接虚拟机"><a href="#使用-VSCode-连接虚拟机" class="headerlink" title="使用 VSCode 连接虚拟机"></a>使用 VSCode 连接虚拟机</h1><p>首先安装插件，在extensions中搜索Remote - ssh，安装该插件<br><img src="https://raw.githubusercontent.com/onep1us/blog_pics/main/%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.jpg" alt="插件安装"><br>点击remote explorer按钮，点击SSH设置的按钮，打开配置ssh的页面<br><img src="https://raw.githubusercontent.com/onep1us/blog_pics/main/%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE.jpg" alt="插件配置"><br>对配置文件进行修改，本人的配置如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">Host</span> <span class="hljs-string">ubuntu22.04</span><br><span class="hljs-comment">#虚拟机ip地址</span><br>    <span class="hljs-string">Hostname</span> <span class="hljs-number">192.168</span><span class="hljs-number">.94</span><span class="hljs-number">.128</span><br><span class="hljs-comment">#连接用户id</span><br>    <span class="hljs-string">User</span> <span class="hljs-string">oneplus</span><br><span class="hljs-comment">#连接端口号，此前配置为22</span><br>    <span class="hljs-string">Port</span> <span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><p>点击连接按钮，进行连接，输入密码后，连接到虚拟机，快捷键：ctrl + j可打开虚拟机的控制台<br><img src="https://raw.githubusercontent.com/onep1us/blog_pics/main/ssh%E8%BF%9E%E6%8E%A5.jpg" alt="ssh连接"></p>]]></content>
    
    
    
    <tags>
      
      <tag>虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo搭建个人博客流程</title>
    <link href="/2024/06/10/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B/"/>
    <url>/2024/06/10/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>本文介绍如何使用GitHub Pages + Hexo 搭建个人博客网站。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h2><p>Git 是一个分布式版本控制软件，目前已经成为最流行的版本管理工具。我们将会经常利用到它的分支合并与分支追踪的功能。</p><h3 id="windows环境安装"><a href="#windows环境安装" class="headerlink" title="windows环境安装"></a>windows环境安装</h3><p>打开<a href="https://git-scm.com/downloads">官网</a>，点击红色方框中的按钮，下载git安装包。安装包下载完毕后，打开安装包，一路确定即可。</p><p><img src="https://raw.githubusercontent.com/onep1us/blog_pics/main/git%E5%AE%89%E8%A3%85.png" alt="git安装"></p><h3 id="Linux环境安装"><a href="#Linux环境安装" class="headerlink" title="Linux环境安装"></a>Linux环境安装</h3><p>在Linux环境下使用如下指令安装 Git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install git<br></code></pre></td></tr></table></figure><p>安装成功后使用如下指令验证是否安装成功，若安装成功，则控制台会显示git版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git --version<br></code></pre></td></tr></table></figure><h2 id="安装NodeJs"><a href="#安装NodeJs" class="headerlink" title="安装NodeJs"></a>安装NodeJs</h2><p>打开<a href="https://nodejs.org/zh-cn/download">官网</a>，选择机器对应的操作系统，下载安装包，下载完成后，打开安装包，一路确定即可。<br><img src="https://raw.githubusercontent.com/onep1us/blog_pics/main/20240610221624.png" alt="NodeJs安装"><br>安装成功后使用如下指令验证是否安装成功，若安装成功，则控制台会显示NodeJs版本号</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br></code></pre></td></tr></table></figure><h1 id="GitHub仓库创建"><a href="#GitHub仓库创建" class="headerlink" title="GitHub仓库创建"></a>GitHub仓库创建</h1><p>本博客采用了GitHub Pages的方式将静态页面进行部署，因为GitHub Pages部署比较简单，可以提供免费的域名，还具有比较高的安全性，所以本博客采用GitHub Pages的方式进行部署。GitHub Pages官方文档链接为<a href="https://docs.github.com/zh/pages/getting-started-with-github-pages/about-github-pages">GitHub Pages</a>。</p><p>由于采用了GitHub Pages的方式对博客进行部署，所以在部署前需要创建对应的GitHub仓库，创建GitHub仓库的流程如下所示：</p><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><p>首先登录GitHub，点击新建仓库的按钮创建仓库<br><img src="https://raw.githubusercontent.com/onep1us/blog_pics/main/20240610223408.png" alt="创建仓库"><br>在创建仓库时，需要先填写仓库名称，此处的仓库名称规则为：<strong>&lt;username&gt;.github.io</strong>，本仓库的名称为onep1us.github.io<br><img src="https://raw.githubusercontent.com/onep1us/blog_pics/main/20240610223527.png"><br>仓库创建完毕后，需要将仓库指定为本账号GitHub Pages对应的仓库，流程如图所示，首先打开仓库，点击Settings按钮，选择Page选项，将本仓库设置为账号对应的GitHub Pages，并且选择仓库的分支，将仓库的分支设置为部署页面时被使用的分支。<br><img src="https://raw.githubusercontent.com/onep1us/blog_pics/main/20240610224003.png" alt="配置GitHub Pages"> </p><h1 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h1><p>本博客采用了Hexo来创建博客网站，Hexo是一款出色的静态博客生成器，它基于Node.js开发，并使用Markdown等标记语言将文章内容转化为静态HTML页面。Hexo官网链接为<a href="https://hexo.io/zh-cn/">Hexo</a>。</p><h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><p>安装Hexo的指令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#安装Hexo</span></span><br>npm install -g hexo-cli<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#查看版本</span></span><br>hexo -v<br></code></pre></td></tr></table></figure><h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><p>安装完成后，使用git命令拉取上一步中创建的仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git@github.com:onep1us/onep1us.github.io.git<br></code></pre></td></tr></table></figure><p>进入被拉取到的仓库的目录，执行命令进行Hexo的初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init<br></code></pre></td></tr></table></figure><p>至此，博客搭建完毕，但是官方默认的主题不太好看，本博客对主题进行了更换，更换为了<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid主题</a>，主题更换流程如下：</p><h4 id="获取主题最新版本"><a href="#获取主题最新版本" class="headerlink" title="获取主题最新版本"></a>获取主题最新版本</h4><p>进入博客目录执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 内容复制进去。</p><h4 id="指定主题"><a href="#指定主题" class="headerlink" title="指定主题"></a>指定主题</h4><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><h4 id="创建「关于页」"><a href="#创建「关于页」" class="headerlink" title="创建「关于页」"></a>创建「关于页」</h4><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后，编辑博客目录下 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure><p>至此，博客搭建完毕，使用如下命令可将博客部署到Github Pages</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo d -s<br></code></pre></td></tr></table></figure><p>部署完毕后，打开链接<a href="https://onep1us.github.io/">onep1us.github.io</a>即可查看更新后的页面。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
